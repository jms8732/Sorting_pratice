package sort_project;

import java.awt.Color;

public class MergeThread extends baseThread implements Runnable {

	public MergeThread(int LEN, Point[] array) {
		super(LEN, array, "Merge Sort");
	}

	public void run() {
		int left = 0;
		int right = array.length;

		merge_sort(left, right);
	}

	private void merge(int left, int mid, int right) {
		int i = left;
		int j = right;
		int k = left;

		Point[] temp = new Point[right - left];

		while (i <= mid && j <= right) {
			if (array[i].len < array[j].len) {
				temp[k] = array[i++];
			} else
				temp[k] = array[j++];
			temp[k++].color = Color.red;
		}

		if (i > mid) {
			for (int l = j; l <= right; l++) {
				temp[k] = array[l];
				temp[k].color = Color.red;
				k++;
			}
		} else {
			for (int l = i; i <= mid; i++) {
				temp[k] = array[l];
				temp[k].color = Color.red;
				k++;
			}
		}
		
		for(int l = left ; l <= right ;l ++) {
			array[l] = temp[l];
			array[l].color = Color.white;
			b.repaint();
		}
	}

	private void merge_sort(int left, int right) {
		int mid = (left + right) / 2;

		if (left < right) {
			merge_sort(left, mid);
			merge_sort(mid, right);
			merge(left, mid, right);
		}
	}
}
