package sort_project;

import java.awt.Color;

public class TimThread extends baseThread implements Runnable {
	private final int RUN = 16;

	public TimThread(int LEN, Point[] array, int x, int y) {
		super(LEN, array, "Tim sort", x, y);
	}

	public void run() {
		timSort(0, array.length - 1);
		finish();
	}

	private void timSort(int left, int n) {

		// 먼저, RUN의 크기로 삽입정렬로 정렬을 수행한다.
		for (int i = 0; i < n; i += RUN) {
			insertionSort(i, Math.min(i + RUN, n));
		}

		// RUN 크기보다 작을 경우, 정렬이 다된 상태이다. => 삽입 정렬 때문에
		for (int size = RUN; size < n; size = 2 * size) {
			for (int l = 0; l < n; l += 2 * size) {

				int mid = l + size - 1;
				int right = Math.min(l + 2 * size - 1, n);

				mergeSort(l, mid, right);
			}
		}
	}

	private void mergeSort(int l, int m, int r) {
		Point[] left = new Point[m - l + 1];
		Point[] right = new Point[r - m];

		int left_idx = 0;
		int right_idx = 0;
		int k = l;

		for (int i = 0; i < left.length; i++) {
			left[i] = array[i + l];
		}

		for (int i = 0; i < right.length; i++) {
			right[i] = array[i + m + 1];
		}

		while (left_idx < left.length && right_idx < right.length) {
			if (left[left_idx].len > right[right_idx].len) {
				array[k] = left[left_idx++];
			} else
				array[k] = right[right_idx++];
			array[k++].color = Color.red;

			b.repaint();
			sleep();
		}

		if (left_idx > m) {
			for (int i = right_idx; i < right.length; i++) {
				array[k] = right[i];
				array[k++].color = Color.red;
				b.repaint();
				sleep();
			}
		} else {
			for (int i = left_idx; i < left.length; i++) {
				array[k] = left[i];
				array[k++].color = Color.red;
				b.repaint();
				sleep();
			}
		}

		for (Point p : left) {
			p.color = Color.white;
		}

		for (Point p : right) {
			p.color = Color.white;
		}
	}

	private void print(int[] temp) {
		for (int i = 0; i < temp.length; i++) {
			System.out.print(temp[i] + " ");
		}
		System.out.println();
	}

	private void insertionSort(int left, int right) {
		for (int i = left + 1; i < right; i++) {
			Point temp = array[i];

			int j = i - 1;

			while (j >= 0 && array[j].len < array[j + 1].len) {
				Point p = array[j];
				array[j] = array[j + 1];
				array[j + 1] = p;

				array[j].color = Color.red;
				array[j + 1].color = Color.red;
				b.repaint();
				sleep();

				array[j].color = Color.white;
				array[j + 1].color = Color.white;
				b.repaint();
			}

			array[j + 1] = temp;
			b.repaint();
			sleep();
		}

	}
}
